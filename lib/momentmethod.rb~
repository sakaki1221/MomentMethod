require 'optparse'
require 'fileutils'
require 'momentmethod/version'
require 'momentmethod/momentmethod.rb'
p ARGV[0]
target_path = ARGV[0] #==nil ? './' : @argv[0]

command_parser = OptionParser.new do |opt|
opt.on('-v', '--version','show program Version.') {
opt.version = PseudoVASP::VERSION
puts opt.ver
}
opt.on('--potential TYPE',[:eam,:lj],
'potential selection, TYPEs=eam or lj.') {|type|
@opts[:potential]= type
}
opt.on('--potcar FILE','potcar name.') {|file|
@opts[:potential]= :lj
@opts[:potcar_name]= file
}
opt.on('--force [SITE]','check force on SITE or all sites(SITE>=100)') {|v|
@opts[:calculation]= :force_check
@opts[:site]= v if v!=nil
}
opt.on('--moment [STRUCTURE]','calculate free energy by Moment method, STRUCTURE=jindofcc, sakakifcc') {|v|
@opts[:calculation]= :moment_method
@opts[:structure]= v if v!=nil
}
opt.on('--momentplot [STRUCTURE]','plot k and gamma in Moment method by gnuplot, STRUCTURE=jindofcc, sakakifcc') {|v|
@opts[:calculation]= :moment_plot
@opts[:structure]= v.to_s if v!=nil
}
opt.on('--plot [VALUE]','plot k and gamma by gnuplot, expand plot range to VALUE, default 2.5e-8 <-> 2.6e-8') {|v|
v ? @opts[:plot]= v.to_i : @opts[:plot]= 1
}
end
end


FileUtils.cd(target_path){
  MomentMethod.new("jindofcc")
}
